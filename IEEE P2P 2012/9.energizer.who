How do we build the Energizer with Personify?

An Energizer is a higher level combination of specialized base Personify archetypes: A Collector and a Negotiator. Building on the recursive nature of agents, A Collector is itself a specialized combination of a Scout, an Archivist, and an Analyst. Examples may prove fruitful.

Base archetypes are finely grained composable abstractions[] that adhere to the Single Responsibility Principle[]. 

For example, the Scout's responsibility is to retrieve data. Scout simply exposes an operation get(), which returns a Data Transfer Object[] with a results property. 

Base archetypes are built for flexibility using Design Patterns[]. Patterns increase the configurability and abstraction of the archetypes; hence we leverage pieces such as Strategy, Template Method, and Chain of Responsibility. 

For example, the Scout exposes a RetrievalStrategy, FilteringStrategy, and FormattingStrategy. Specialized Scouts replace a default implementation algorithm with a context dependent one. 

Specializations are thin, they apply the Decorator Pattern to configure their underlying archetypes with just enough information to get the job done. 

For example, an EnergizerScout decorates a Scout. EnergizerScout configures its RetrievalStrategy with an operation that finds another Energizer to retrieve information from, its FilteringStrategy to get only information about current energy availability, and its FormattingStrategy to return information in the Javascript Object Notation for parsing and display by a Presenter (another Agent). 

Specializations also hold the reasoning logic an agent uses in its tasks. Specializations account for contextual Beliefs, Capabilities, and Choices, a combination of different Agent-Oriented Programming approaches[][]  

An Archivist is similar to an Object Relational Mapper (ORM) layer in classical enterprise applications[][]. The Archivist's responsibility is to store Records in a StorageLocation. Archivist exposes Create/Read/Update/Delete functionality..

For example, an EnergizerArchivist decorates an Archivist. EnergizerArchivist configures the StorageLocation to correspond to driver interface calls to the energy storage drive to retrieve and store energy.

An Analyst is an agent who specializes in analytics, personifying a role often distributed in other systems. Analysts calculate metrics which can be used by other agents (often from the higher level) for decision-making purposes. 

For example: an EnergizerAnalyst decorates an Analyst and calculates consumption per kwHr for given time periods. It updates rolling averages. An EnergizerAnalyst can use this information to determine when it should initiate energy brokerage with other Energizers based upon historical trends and user-defined goals.

A Collector is a higher--level agent that encapsulates Scout, Archivist, and Analyst. Like a manager in a human team, it acts as a coordinator for these activities. It delegates processes to sub-agents for completion, then plans for future consumption and provides guidance to the Negotiator for transactions.

A Negotiator is an agent that specializes in bargaining with other agents. A Negotiator has a ranked set of goals that it optimizes create a favorable agreement with another agent. It forms the interface piece that encapsulates energy trade for an Energizer in the PowerNet.

An Energizer is essentially a coordination layer that serves as an Aggregate Root[] for updating its internal representation of the world and adapting to environmental changes such as a power outage.  It serves as a Bounded Context[] for its sub-agents.

References:
B. Cross, "Why prismatic goes faster with clojure," in Clojure/West, Mar. 2012.

R. C. Martin and M. Martin, Agile Principles, Patterns, and Practices in C#, 1st ed.    Prentice Hall, Jul. 2006. [Online]. Available: http://www.worldcat.org/isbn/0131857258

M. Fowler, Patterns of Enterprise Application Architecture, 1st ed.    Addison-Wesley Professional, Nov. 2002. [Online]. Available: http://www.worldcat.org/isbn/0321127420

E. Gamma, R. Helm, R. Johnson, and J. Vlissides, Design Patterns: Elements of Reusable Object-Oriented Software, 1st ed.    Addison-Wesley Professional, Nov. 1994. [Online]. Available: http://www.worldcat.org/isbn/0201633612

Y. Shoham, "Agent-oriented programming," Artif. Intell., vol. 60, no. 1, pp. 51-92, Mar. 1993. [Online]. Available: http://dx.doi.org/10.1016/0004-3702(93)90034-9